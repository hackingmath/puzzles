#= 
Farshonku 20
https://twitter.com/1to9puzzle/status/1395414677954260994
May 20, 2021
=#

const board = Array(Int8[0 0 0 0 0 0;
                         0 1 0 0 2 0;
                         0 0 0 0 0 0;
                         0 0 0 0 0 0;
                         0 9 0 0 7 0;
                         0 0 0 0 0 0])

const GREENS = [4,5,6,8,9,12,13,15,16,20,23,24,25,26,27,31,34,35]
const BOTTOM = [15,18,16,14,12,15]
const RIGHT = [16,16,14,16,16,12]

const QUAD_CORNERS = [(1,1),(4,1),
                      (1,4),(4,4)]

const lookup = zeros(CartesianIndex{2}, count(i->(i==0),  board))

function quadrant(board, n)
    (i, j) = QUAD_CORNERS[n]
    view(board, i:i+2, j:j+2)
end
            
function repeat(mylist)
    for i in mylist
        if i != 0
            if count(j->j==i,mylist) > 1
                return true
                end
            end
        end
    return false
end

function print_board(solution_board)
    print()
    for i in 1:6
        for j in 1:6
            print(' ')
            print(solution_board[i, j])
        end
        println()
    end
    println() #blank line
end
    

function check_no_conflicts(solution_board)
    for i in 1:6
        thisrow = view(solution_board, i, :)
        thisrow_greens = [solution_board[i,n] for n in 1:6 if 6*(i-1)+n ∈ GREENS]
        #println(thisrow,",",thisrow_greens)
        
        if repeat(thisrow)
            return false
        end
        
#  
        if count(j->j==0,thisrow) == 0
            if sum(thisrow) != 30
                return false
            end
            if sum(thisrow_greens) != RIGHT[i]
                #print_board(solution_board)
                #println("row"," ",i," ",thisrow," ",thisrow_greens)
                return false
            end

        end
        thiscol = view(solution_board, :, i)
        thiscol_greens = [solution_board[n,i] for n in 1:6 if 6*(n-1)+i ∈ GREENS]
        if repeat(thiscol)
            return false
        end

        if count(j->j==0,thiscol) == 0
            if sum(thiscol) != 30
                return false
            end
            
            if sum(thiscol_greens) != BOTTOM[i]
                return false
            end

        end

    end
    
    for i in 1:4
        if repeat(quadrant(solution_board, i))
            return false
        end
    end
    return true
end

function solve(values, safe_up_to, size)
    solution_list = zeros(size)
    ind = 1
    for r in 1:6
        for c in 1:6
            if  board[r, c] == 0
                lookup[ind] = CartesianIndex(r, c)
                ind += 1
            end
        end
    end
    function extend_solution(position)
        for value in values
             board[lookup[position]] = value
            if safe_up_to( board)
                if position >= size
                    return true
                end
                new_solution = extend_solution(position+1)
                if new_solution
                    return true
                end
            else
                 board[lookup[position]] = 0
                if value == values[length(values)] && position > 1
                     board[lookup[position-1]] = 0
                end
                if position < size
                     board[lookup[position+1]] = 0
                end
            end
        end
        false
    end
    extend_solution(1)
end

function main()
    blanks = count(i->i==0,  board)
    if solve(1:9, check_no_conflicts, blanks)
        print_board( board)
    else
        print("solve failed to find solution")
    end
end

function test()

end

#test()
@time main()

#=
Solution:
 3 5 6 8 1 7
 8 1 9 4 2 6
 7 4 2 5 9 3
 4 8 1 9 6 2
 2 9 5 3 7 4
 6 3 7 1 5 8

  4.803842 seconds (107.43 M allocations: 5.608 GiB, 11.74% gc time)

=#
