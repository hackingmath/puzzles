'''From 1to9puzzle Twitter post
https://twitter.com/1to9puzzle/status/1213492937809522690
January 4, 2020
Sudoku board, with white squares with numbers signifying the
order of the adjacent squares.'''

import time,random

starttime = time.time()

boards = []
NUMBLANKS = 0

#from specific puzzle #2001
BOARD = 'X000060X0\
400X00X00\
X000X0300\
07X00000X\
000X00X30\
0X020X000\
00007X00X\
00X0X0003\
0X30000X0'

GRAYS =   []
glists = [[0,1,2,0],[0,1,3,2],[3,1,2,3],[3,4,2,1],[1,2,2,0],[1,2,2,3],
          [2,1,1,3],[3,0,1,2],[1,3,2,1],[2,3,1,4],[4,3,1,2],[3,1,0,2],
          [0,2,1,3],[3,0,1,2],[3,3,1,2],[4,1,2,3],[2,1,0,3],[2,1,0,3]]

graydict = dict()

def create_board(board):
    output = []
    for i,n in enumerate(board):
        #if n == '\n' or n == ' ': continue
        if n == '0':
            output.append(0)
        elif n == 'X':
            output.append('X')
        else:
            output.append(int(n))
    return output

def populate_board(boardlist):
    global board
    '''Puts new values into existing board spots
    to prevent overwriting hard values'''
    #print("boardlist",boardlist)
    output = []
    board = create_board(BOARD)
    #print("board:",board)
    i = 0
    for j in range(81):
        if board[j] == 0:
            #try:
            output.append(boardlist[i])
            i += 1
        else:
            output.append(board[j])
    return output

def row(board,n):
    '''returns values in row n of board'''
    return board[9*n:9*n+9]

def col(board,n):
    '''returns values in col n of board'''
    output = []
    for j in range(9):
        output.append(board[9*j + n])
    return output

def sum_row(board,n):
    output = 0
    for n in row(board,n):
        if n != 'X' and n != '_':
            output += n

    return output == 45


def sum_col(board, n):
    output = 0
    for n in col(board,n):
        if n != 'X' and n != '_':
            output += n

    return output == 45

def quadrant(board,n):
    #put values in each quadrant into lists
    quadrants = []
    for j in [0,1,2,9,10,11,18,19,20]: #the 9 sub-blocks
        block = []
        for k in range(3):
            block.append(board[9*k+3*j:9*k+3*j+3])
        quad = []
        for thing in block:
            for t in thing:
                quad.append(t)
        quadrants.append(quad)
    return quadrants[n]

def calc_quadrant(n):
    '''Calculates which quadrant the given cell is
    Also returns '''
    quads = [[0,1,2,9,10,11,18,19,20],
             [3,4,5,12,13,14,21,22,23],
             [6,7,8,15,16,17,24,25,26],
             [27,28,29,36,37,38,45,46,47],
             [30,31,32,39,40,41,48,49,50],
             [33,34,35,42,43,44,51,52,53],
             [54,55,56,63,64,65,72,73,74],
             [57,58,59,66,67,68,75,76,77],
             [60,61,62,69,70,71,78,79,80]]
    for q in range(9):
        if n in quads[q]:
            return q,quads[q].index(n)

def nbs(boardlist,n):
    """Returns a 4-list of neighbors of item
    at nth position of boardlist"""
    output = [0,0,0,0] #top, right, bottom, left
    if n >= 9: #top
        output[0] = boardlist[n-9]
    if n % 9 < 8: #right
        output[1] = boardlist[n+1]
    if n < 72: #bottom
        output[2] = boardlist[n+9]
    if n % 9 > 0: #left
        output[3] = boardlist[n-1]
    return output

def rank(mylist):
    """Puts list of 4 numbers into order
    rank([2,5,1,7]) --> [2,3,1,4]
    rank([0,0,2,6]) --> [0,0,1,2]
    rank([5,2,2,3]) --> [3,2,2,1]"""
    output = [0,0,0,0]
    nums = list()
    for n in sorted(mylist):
        if n != 0 and n != 'X' and n not in nums:
            nums.append(n)
    for i, n in enumerate(mylist):
        if n != 0 and n != 'X':
            output[i] = nums.index(n) + 1
    return output

def check_grays(board,n):
    """Returns True if gray on position n is ok"""
    neighbors = nbs(board,n)
    r = rank(neighbors)
    if r != graydict[n]:
        print(neighbors, rank(neighbors),graydict[n])
        return False
    return True

def print_quad(g):

    #g=list(board)

    print("{:2} {:2} {:2}".format(g[0],g[1],g[2]))
    print("{:2} {:2} {:2}".format(g[3],g[4],g[5]))
    print("{:2} {:2} {:2}".format(g[6],g[7],g[8]))

def print_board2(board):
    #board = []
    '''if len(board) < 81:
        board = populate_board(board)'''
    for i in range(9):
        this_row = row(board,i)
        for j in range(9):
            print(this_row[j],end = ' ')
        print()
    print() #blank line

def print_board(board):

    g=list(board)

    print("{} {} {} | {} {} {} | {} {} {}".format(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[9],g[10],g[11],g[12],g[13],g[14],g[15],g[16],g[17]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[18],g[19],g[20],g[21],g[22],g[23],g[24],g[25],g[26]))
    print()
    print("{} {} {} | {} {} {} | {} {} {}".format(g[27],g[28],g[29],g[30],g[31],g[32],g[33],g[34],g[35]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[36],g[37],g[38],g[39],g[40],g[41],g[42],g[43],g[44]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[45],g[46],g[47],g[48],g[49],g[50],g[51],g[52],g[53]))
    print()
    print("{} {} {} | {} {} {} | {} {} {}".format(g[54],g[55],g[56],g[57],g[58],g[59],g[60],g[61],g[62]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[63],g[64],g[65],g[66],g[67],g[68],g[69],g[70],g[71]))
    print("{} {} {} | {} {} {} | {} {} {}".format(g[72],g[73],g[74],g[75],g[76],g[77],g[78],g[79],g[80]))
    print()
    print()

def repeat(mylist):
    for n in mylist:
        if n != 'X' and n != 0:
            if mylist.count(n) > 1:
                return True
    return False


def check_no_conflicts(board):
    '''Returns False if there ARE conflicts'''
    board1 = populate_board(board)
    #print("board1:",board1)
    for i in range(9):
        this_row = row(board1,i)
        this_col = col(board1,i)
        this_quad = quadrant(board1, i)

        if repeat(this_row) or repeat(this_col) or repeat(this_quad):
            return False

    for n in GRAYS:
        nb = nbs(board1,n)
        if 0 not in nb and 'X' not in nb:
            if not check_grays(board1,n):
                print_board(board1)
                print("gray",n)
                return False

    return True


def solve(values, safe_up_to, size):
    global solution
    """Finds a solution to a backtracking problem.

    values     -- a sequence of values to try, in order. For a map coloring
                  problem, this may be a list of colors, such as ['red',
                  'green', 'yellow', 'purple']
    safe_up_to -- a function with two arguments, solution and position, that
                  returns whether the values assigned to slots 0..pos in
                  the solution list, satisfy the problem constraints.
    size       -- the total number of “slots” you are trying to fill

    Return the solution as a list of values.
    """
    solution = [0]*size
    #board = create_board(solution)

    def extend_solution(position):
        global solution
        for value in values:
            solution[position] = value
            #save_board(solution)
            #print_board(populate_board(solution))
            if safe_up_to(solution):
                #solution = solution2
                if position >= size-1 or extend_solution(position+1):
                    return solution
            else:
                solution[position] = 0
                if value == values[-1]:
                    solution[position-1] = 0
                if position < size - 1:
                    solution[position + 1] = 0

        return None

    return extend_solution(0)

NUMBLANKS = sum([1 for n in range(81) if BOARD[n] == '0'])
GRAYS = [n for n in range(81) if BOARD[n] == 'X']
graydict = dict(zip(GRAYS,glists))

def test():
    #print("NUMBLANKS:",NUMBLANKS)
    #print("GRAYS:",GRAYS) #[0, 7, 12, 15, 18, 22, 29, 35, 39, 42, 46, 50, 59, 62, 65, 67, 73, 79]
    board = populate_board([random.choice(range(1,8)) for i in range(NUMBLANKS)])
    print_board(board)
    for n in [0,7]:
        print("nbs:",nbs(board,n))
        print("check_grays:",check_grays(board,n))


def main():
    #soln = [random.choice(range(1,10)) for i in range(63)]
    soln = solve(list(range(1,8)),check_no_conflicts,NUMBLANKS)
    print_board(populate_board(soln))


    #print_board([n for n in range(81)])
    print("time (secs):",round(time.time() - starttime,1))

#test()
main()

"""
Solution:

X 1 5 | 7 3 6 | 4 X 2
4 3 7 | X 1 2 | X 6 5
X 6 2 | 5 X 4 | 3 1 7

6 7 X | 1 4 3 | 2 5 X
2 5 1 | X 6 7 | X 3 4
3 X 4 | 2 5 X | 1 7 6

1 2 6 | 3 7 X | 5 4 X
5 4 X | 6 X 1 | 7 2 3
7 X 3 | 4 2 5 | 6 X 1


time (secs): 4.2
"""
